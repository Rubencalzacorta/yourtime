{"ast":null,"code":"var _jsxFileName = \"/home/rubencalzacorta/Desktop/personal_projects/hooks_redux_imdb/proyecto-react-hooks-redux-udemy/src/pages/Results/index.js\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Container, CircularProgress } from \"@material-ui/core\"; //queryString en una dependencia que viene ya instalada que sirve para comvertir querystrings in objetos\n\nimport queryString from \"query-string\";\nimport { searchMovie } from \"../../redux/actions/search\";\nimport MovieResult from \"../../components/MovieResult\"; //importar selectores\n\nimport { movieResults, isSearchLoading } from \"../../redux/selectors\"; //{location} is a decomposition from the property location fo the object props\n\nexport default (({\n  location\n}) => {\n  //instanciar el dispatch\n  const dispatch = useDispatch();\n  const movies = useSelector(state => movieResults(state));\n  console.log(movies); //use effect recibe un callback que se va a ejecutar cada vez que se monte el componente - el equivalente a component did mount\n\n  useEffect(() => {\n    //queryString.parse crea un objeto de un query estring. el querystring siempre esta en props.location.search\n    const {\n      movieName\n    } = queryString.parse(location.search); //only fires the dispatch accion when there is no movie list and when you have the name of the movie to look for \n\n    if (movieName && !movies) {\n      //dispatch se usa para llamar a una accion. en este caso searchMovie que llama a la api\n      dispatch(searchMovie({\n        movieName\n      }));\n    }\n  });\n\n  const renderMovies = () => {\n    if (movies) {\n      return movies.map((elm, idx) => /*#__PURE__*/React.createElement(MovieResult, Object.assign({\n        key: idx\n      }, elm, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 45\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(CircularProgress, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 20\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, renderMovies());\n});","map":{"version":3,"sources":["/home/rubencalzacorta/Desktop/personal_projects/hooks_redux_imdb/proyecto-react-hooks-redux-udemy/src/pages/Results/index.js"],"names":["React","useEffect","useDispatch","useSelector","Container","CircularProgress","queryString","searchMovie","MovieResult","movieResults","isSearchLoading","location","dispatch","movies","state","console","log","movieName","parse","search","renderMovies","map","elm","idx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,mBAA5C,C,CACA;;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,SAASC,WAAT,QAA4B,4BAA5B;AACA,OAAOC,WAAP,MAAwB,8BAAxB,C,CAEA;;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,uBAA9C,C,CACA;;AACA,gBAAe,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAE7B;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,MAAM,GAAGV,WAAW,CAACW,KAAK,IAAIL,YAAY,CAACK,KAAD,CAAtB,CAA1B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAN6B,CAQ7B;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAM;AAAEgB,MAAAA;AAAF,QAAgBX,WAAW,CAACY,KAAZ,CAAkBP,QAAQ,CAACQ,MAA3B,CAAtB,CAFY,CAIZ;;AACA,QAAIF,SAAS,IAAI,CAACJ,MAAlB,EAA0B;AACtB;AACAD,MAAAA,QAAQ,CAACL,WAAW,CAAC;AAAEU,QAAAA;AAAF,OAAD,CAAZ,CAAR;AACH;AACJ,GATQ,CAAT;;AAWA,QAAMG,YAAY,GAAG,MAAM;AACvB,QAAIP,MAAJ,EAAY;AACR,aAAOA,MAAM,CAACQ,GAAP,CAAW,CAACC,GAAD,EAAMC,GAAN,kBAAc,oBAAC,WAAD;AAAa,QAAA,GAAG,EAAEA;AAAlB,SAA2BD,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAzB,CAAP;AACH,KAFD,MAEO;AACH,0BAAO,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;AACJ,GAND;;AAQA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,YAAY,EADjB,CADJ;AAMH,CAlCD","sourcesContent":["import React, { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Container, CircularProgress } from \"@material-ui/core\"\n//queryString en una dependencia que viene ya instalada que sirve para comvertir querystrings in objetos\nimport queryString from \"query-string\"\n\nimport { searchMovie } from \"../../redux/actions/search\"\nimport MovieResult from \"../../components/MovieResult\"\n\n//importar selectores\nimport { movieResults, isSearchLoading } from \"../../redux/selectors\"\n//{location} is a decomposition from the property location fo the object props\nexport default ({ location }) => {\n\n    //instanciar el dispatch\n    const dispatch = useDispatch()\n    const movies = useSelector(state => movieResults(state))\n\n    console.log(movies)\n\n    //use effect recibe un callback que se va a ejecutar cada vez que se monte el componente - el equivalente a component did mount\n    useEffect(() => {\n        //queryString.parse crea un objeto de un query estring. el querystring siempre esta en props.location.search\n        const { movieName } = queryString.parse(location.search)\n\n        //only fires the dispatch accion when there is no movie list and when you have the name of the movie to look for \n        if (movieName && !movies) {\n            //dispatch se usa para llamar a una accion. en este caso searchMovie que llama a la api\n            dispatch(searchMovie({ movieName }))\n        }\n    })\n\n    const renderMovies = () => {\n        if (movies) {\n            return movies.map((elm, idx) => <MovieResult key={idx} {...elm} />)\n        } else {\n            return <CircularProgress />\n        }\n    }\n\n    return (\n        <Container>\n            {renderMovies()}\n        </Container>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}