{"ast":null,"code":"import { put, call, takeLatest } from \"redux-saga/effects\";\nimport { SEARCH_MOVIE_START, SEARCH_MOVIE_ERROR, SEARCH_MOVIE_COMPLETE, SEARCH_MOVIE_BY_ID_START, SEARCH_MOVIE_BY_ID_ERROR, SEARCH_MOVIE_BY_ID_COMPLETE } from \"../../consts/actionTypes\";\nimport { apiCall } from \"../api\";\nexport function* searchMovie({\n  payload\n}) {\n  try {\n    //with yield yo indicate the action to wait.\n    //use call to a method. the following arguement ts are the arguements that apicall receives.\n    const results = yield call(apiCall, `&s=${payload.movieName}`, null, null, \"GET\");\n    yield put({\n      type: SEARCH_MOVIE_COMPLETE,\n      results\n    });\n  } catch (error) {\n    yield put({\n      type: SEARCH_MOVIE_ERROR,\n      error\n    });\n  }\n}\nexport function* searchMovieById({\n  payload\n}) {\n  try {\n    console.log(\"estoy denyto de searchmovie by id\"); //with yield yo indicate the action to wait.\n    //use call to a method. the following arguement ts are the arguements that apicall receives.\n\n    const movie = yield call(apiCall, `&i=${payload.movieId}`, null, null, \"GET\");\n    yield put({\n      type: SEARCH_MOVIE_BY_ID_COMPLETE,\n      movie\n    });\n  } catch (error) {\n    console.log(\"paso por error del catch\"); // yield put({ type: SEARCH_MOVIE_BY_ID_ERROR, error })\n  }\n}\nexport default function* search() {\n  yield takeLatest(SEARCH_MOVIE_START, searchMovie);\n  yield takeLatest(SEARCH_MOVIE_BY_ID_START, searchMovieById);\n}","map":{"version":3,"sources":["/home/rubencalzacorta/Desktop/personal_projects/hooks_redux_imdb/proyecto-react-hooks-redux-udemy/src/redux/sagas/search.js"],"names":["put","call","takeLatest","SEARCH_MOVIE_START","SEARCH_MOVIE_ERROR","SEARCH_MOVIE_COMPLETE","SEARCH_MOVIE_BY_ID_START","SEARCH_MOVIE_BY_ID_ERROR","SEARCH_MOVIE_BY_ID_COMPLETE","apiCall","searchMovie","payload","results","movieName","type","error","searchMovieById","console","log","movie","movieId","search"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,QAAsC,oBAAtC;AAEA,SACIC,kBADJ,EAEIC,kBAFJ,EAGIC,qBAHJ,EAIIC,wBAJJ,EAKIC,wBALJ,EAMIC,2BANJ,QAOO,0BAPP;AASA,SAASC,OAAT,QAAwB,QAAxB;AAEA,OAAO,UAAUC,WAAV,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACtC,MAAI;AAEA;AACA;AACA,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACQ,OAAD,EAAW,MAAKE,OAAO,CAACE,SAAU,EAAlC,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,KAAjD,CAA1B;AACA,UAAMb,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAET,qBAAR;AAA+BO,MAAAA;AAA/B,KAAD,CAAT;AAEH,GAPD,CAOE,OAAOG,KAAP,EAAc;AAEZ,UAAMf,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAEV,kBAAR;AAA4BW,MAAAA;AAA5B,KAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEL,EAAAA;AAAF,CAA1B,EAAuC;AAC1C,MAAI;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EADA,CAEA;AACA;;AACA,UAAMC,KAAK,GAAG,MAAMlB,IAAI,CAACQ,OAAD,EAAW,MAAKE,OAAO,CAACS,OAAQ,EAAhC,EAAmC,IAAnC,EAAyC,IAAzC,EAA+C,KAA/C,CAAxB;AAEA,UAAMpB,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAEN,2BAAR;AAAqCW,MAAAA;AAArC,KAAD,CAAT;AAEH,GARD,CAQE,OAAOJ,KAAP,EAAc;AACZE,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EADY,CAEZ;AACH;AACJ;AAED,eAAe,UAAUG,MAAV,GAAmB;AAC9B,QAAMnB,UAAU,CAACC,kBAAD,EAAqBO,WAArB,CAAhB;AACA,QAAMR,UAAU,CAACI,wBAAD,EAA2BU,eAA3B,CAAhB;AACH","sourcesContent":["import { put, call, takeLatest } from \"redux-saga/effects\"\n\nimport {\n    SEARCH_MOVIE_START,\n    SEARCH_MOVIE_ERROR,\n    SEARCH_MOVIE_COMPLETE,\n    SEARCH_MOVIE_BY_ID_START,\n    SEARCH_MOVIE_BY_ID_ERROR,\n    SEARCH_MOVIE_BY_ID_COMPLETE\n} from \"../../consts/actionTypes\"\n\nimport { apiCall } from \"../api\"\n\nexport function* searchMovie({ payload }) {\n    try {\n\n        //with yield yo indicate the action to wait.\n        //use call to a method. the following arguement ts are the arguements that apicall receives.\n        const results = yield call(apiCall, `&s=${payload.movieName}`, null, null, \"GET\")\n        yield put({ type: SEARCH_MOVIE_COMPLETE, results })\n\n    } catch (error) {\n\n        yield put({ type: SEARCH_MOVIE_ERROR, error })\n    }\n}\n\nexport function* searchMovieById({ payload }) {\n    try {\n        console.log(\"estoy denyto de searchmovie by id\")\n        //with yield yo indicate the action to wait.\n        //use call to a method. the following arguement ts are the arguements that apicall receives.\n        const movie = yield call(apiCall, `&i=${payload.movieId}`, null, null, \"GET\")\n\n        yield put({ type: SEARCH_MOVIE_BY_ID_COMPLETE, movie })\n\n    } catch (error) {\n        console.log(\"paso por error del catch\")\n        // yield put({ type: SEARCH_MOVIE_BY_ID_ERROR, error })\n    }\n}\n\nexport default function* search() {\n    yield takeLatest(SEARCH_MOVIE_START, searchMovie)\n    yield takeLatest(SEARCH_MOVIE_BY_ID_START, searchMovieById)\n}"]},"metadata":{},"sourceType":"module"}